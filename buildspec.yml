version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      # The following command logs into ECR. It retrieves an authentication token and pipes it to the docker login command.
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      # The CODEBUILD_RESOLVED_SOURCE_VERSION is a long commit hash. A shorter version is often preferred for tags.
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_URI="$ECR_REPOSITORY_URI:$IMAGE_TAG"
      - docker build -t $IMAGE_URI .
      - docker tag $IMAGE_URI $ECR_REPOSITORY_URI:latest
      - printf '{"ImageURI":"%s"}' $IMAGE_URI > imageDetail.json
      # - printf '{"name":"%s","imageUri":"%s"}' $CONTAINER_NAME $IMAGE_URI > imageDetail.json

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push --all-tags $ECR_REPOSITORY_URI
      - ls -la
      - echo "--- Debugging Contents of taskdef.json ---"
      - cat taskdef.json
      - echo "--- Debugging Contents of appspec.yaml ---"
      - cat appspec.yaml
      - echo "--- Contents of imageDetail.json ---"
      - cat imageDetail.json
      - echo "--- End of Debugging ---"
      #--- END DEBUGGING COMMANDS ---
artifacts:
  files:
    - imageDetail.json
    - appspec.yaml
    - taskdef.json
  discard-paths: yes 